# LiveKit Agent Deployment with OpenAI Realtime API: Complete Integration Guide

## Your deployment error solved

The "project does not match agent subdomain []" error you're experiencing likely stems from a configuration mismatch between your LiveKit Cloud project settings and the deployment configuration. While this specific error wasn't documented in LiveKit's official resources, the research reveals several probable causes and solutions.

### Immediate troubleshooting steps

First, verify your project configuration by checking your authentication and project settings:

```bash
# Check current project configuration
lk project list
lk project show <your-project-name>

# Clear and reconfigure authentication
rm -f ~/.livekit/config.yaml
lk cloud auth
lk project add --api-key <key> --api-secret <secret> <project-name>
lk project set-default <project-name>
```

The critical insight is that LiveKit Cloud URLs must match the format `wss://<project-name>.livekit.cloud`. If your project name doesn't align with the subdomain in your configuration, you'll encounter this error. Your `livekit.toml` should follow this structure:

```toml
url = "wss://your-project-name.livekit.cloud"
api_key = "your-api-key"
api_secret = "your-api-secret"
project = "your-project-name"

[agent]
name = "flight-booking-agent"
```

## Critical breaking changes for 2025

LiveKit Agents 1.0 introduced significant changes that affect your `realtime_agent.py` implementation. The `VoicePipelineAgent` and `MultimodalAgent` classes are now deprecated. You must migrate to the new `AgentSession` pattern:

```python
# OLD (deprecated) - Don't use this
from livekit.agents import MultimodalAgent
agent = MultimodalAgent(model=openai.realtime.RealtimeModel())

# NEW (correct for 2025) - Use this pattern
from livekit.agents import Agent, AgentSession
from livekit.plugins import openai, silero

async def entrypoint(ctx: JobContext):
    await ctx.connect()
    
    # Create the agent with instructions
    agent = Agent(
        instructions="You are a flight booking assistant that helps users search and book flights.",
        tools=[search_flights, book_flight]  # Your function tools
    )
    
    # Create session with RealtimeModel
    session = AgentSession(
        llm=openai.realtime.RealtimeModel(
            voice="alloy",
            model="gpt-4o-realtime-preview-2024-12-17",
            temperature=0.8,
            tool_choice="auto"
        ),
        vad=silero.VAD.load()
    )
    
    await session.start(agent=agent, room=ctx.room)
```

## Architecture recommendation: API Gateway pattern

Based on your requirements and the 800ms latency target for natural voice interactions, the optimal architecture uses an API Gateway pattern rather than embedding the Amadeus SDK directly in the agent:

```
LiveKit Agent → API Gateway → Flight Service → Amadeus SDK
```

This approach provides several advantages:
- **Lower latency**: 400-800ms vs direct SDK integration
- **Better error handling**: Centralized retry logic and circuit breakers
- **Easier maintenance**: Update APIs without modifying agents
- **Security**: Centralized credential management

## Working implementation example

Here's a complete working example that integrates LiveKit with OpenAI Realtime API and external flight search:

```python
# realtime_agent.py
from livekit.agents import (
    Agent, AgentSession, JobContext, RunContext, 
    WorkerOptions, cli, function_tool
)
from livekit.plugins import openai, silero
import aiohttp
import os
from typing import Dict, Any

class FlightAPIClient:
    def __init__(self):
        self.base_url = os.getenv('FLIGHT_API_URL', 'http://localhost:8080')
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def search_flights(self, origin: str, destination: str, date: str) -> Dict[str, Any]:
        async with self.session.post(
            f"{self.base_url}/api/flights/search",
            json={"origin": origin, "destination": destination, "date": date}
        ) as response:
            return await response.json()

@function_tool
async def search_flights(
    context: RunContext,
    origin: str,
    destination: str,
    departure_date: str
) -> Dict[str, Any]:
    """Search for available flights between cities.
    
    Args:
        origin: Three-letter airport code (e.g., JFK)
        destination: Three-letter airport code (e.g., LAX)
        departure_date: Date in YYYY-MM-DD format
    """
    async with FlightAPIClient() as client:
        try:
            results = await client.search_flights(origin, destination, departure_date)
            
            # Format results for voice response
            if results.get('flights'):
                flight_count = len(results['flights'])
                cheapest = min(results['flights'], key=lambda x: x['price'])
                
                return {
                    "status": "success",
                    "message": f"I found {flight_count} flights from {origin} to {destination}. "
                              f"The cheapest option is ${cheapest['price']} "
                              f"departing at {cheapest['departure_time']}.",
                    "flights": results['flights'][:3]  # Return top 3 for voice summary
                }
            else:
                return {
                    "status": "no_flights",
                    "message": f"I couldn't find any flights from {origin} to {destination} on {departure_date}."
                }
        except Exception as e:
            return {
                "status": "error",
                "message": "I'm having trouble searching for flights right now. Please try again."
            }

@function_tool
async def book_flight(
    context: RunContext,
    flight_id: str,
    passenger_name: str,
    email: str
) -> Dict[str, Any]:
    """Book a specific flight for a passenger."""
    # Store booking intent in context for confirmation
    context.userdata.pending_booking = {
        "flight_id": flight_id,
        "passenger_name": passenger_name,
        "email": email
    }
    
    return {
        "status": "confirmation_needed",
        "message": f"I'm ready to book flight {flight_id} for {passenger_name}. "
                  f"The confirmation will be sent to {email}. Should I proceed with the booking?"
    }

async def entrypoint(ctx: JobContext):
    await ctx.connect()
    
    # Initialize agent with flight booking context
    agent = Agent(
        instructions="""You are a helpful flight booking assistant. You can:
        1. Search for flights between cities
        2. Help users compare flight options
        3. Book flights once the user selects one
        
        Always confirm important details like dates and passenger names.
        Be conversational and helpful. If users need to spell airport codes,
        use the phonetic alphabet (A as in Alpha, B as in Bravo, etc.).""",
        tools=[search_flights, book_flight]
    )
    
    # Configure RealtimeModel with optimal settings
    session = AgentSession(
        llm=openai.realtime.RealtimeModel(
            voice="alloy",  # or "coral" for a different voice
            model="gpt-4o-realtime-preview-2024-12-17",
            temperature=0.8,
            tool_choice="auto",
            turn_detection=openai.realtime.TurnDetection(
                type="server_vad",
                threshold=0.5,
                prefix_padding_ms=300,
                silence_duration_ms=500,
                create_response=True,
                interrupt_response=True
            )
        ),
        vad=silero.VAD.load()
    )
    
    await session.start(agent=agent, room=ctx.room)
    
    # Initial greeting
    await session.say("Hello! I'm your flight booking assistant. I can help you search for flights and make reservations. Where would you like to travel?")

if __name__ == "__main__":
    cli.run_app(WorkerOptions(
        entrypoint_fnc=entrypoint,
        worker_type="process",
        num_workers=1,
        prewarm_process=True
    ))
```

## API server architecture

Your `api_server.py` should act as a gateway to the Amadeus SDK:

```python
# api_server.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from datetime import datetime
import os
from amadeus import Client, ResponseError
import asyncio
from typing import List, Dict, Any

app = FastAPI()

# Initialize Amadeus client
amadeus = Client(
    client_id=os.getenv('AMADEUS_CLIENT_ID'),
    client_secret=os.getenv('AMADEUS_CLIENT_SECRET'),
    hostname='production'  # or 'test' for sandbox
)

class FlightSearchRequest(BaseModel):
    origin: str
    destination: str
    date: str
    return_date: str = None
    adults: int = 1

@app.post("/api/flights/search")
async def search_flights(request: FlightSearchRequest) -> Dict[str, Any]:
    try:
        # Run Amadeus API call in thread pool to avoid blocking
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None,
            lambda: amadeus.shopping.flight_offers_search.get(
                originLocationCode=request.origin,
                destinationLocationCode=request.destination,
                departureDate=request.date,
                returnDate=request.return_date,
                adults=request.adults,
                max=10
            )
        )
        
        # Transform Amadeus response for voice agent
        flights = []
        for offer in response.data:
            flight = {
                "id": offer['id'],
                "price": float(offer['price']['total']),
                "currency": offer['price']['currency'],
                "departure_time": offer['itineraries'][0]['segments'][0]['departure']['at'],
                "arrival_time": offer['itineraries'][0]['segments'][-1]['arrival']['at'],
                "duration": offer['itineraries'][0]['duration'],
                "stops": len(offer['itineraries'][0]['segments']) - 1,
                "airline": offer['validatingAirlineCodes'][0]
            }
            flights.append(flight)
        
        return {"status": "success", "flights": flights}
        
    except ResponseError as error:
        raise HTTPException(status_code=400, detail=str(error))

@app.get("/health")
async def health_check():
    return {"status": "healthy"}
```

## Docker configuration for hybrid deployment

For your Docker/ECS deployment alongside LiveKit Cloud:

```dockerfile
# Dockerfile for API server
FROM python:3.11-slim

WORKDIR /app

# Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY . .

# Non-root user for security
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080

CMD ["uvicorn", "api_server:app", "--host", "0.0.0.0", "--port", "8080"]
```

## Deployment commands

To deploy your agent to LiveKit Cloud:

```bash
# Set environment variables
export LIVEKIT_URL=wss://your-project.livekit.cloud
export LIVEKIT_API_KEY=your-api-key
export LIVEKIT_API_SECRET=your-api-secret
export OPENAI_API_KEY=your-openai-key
export FLIGHT_API_URL=https://your-api-gateway.com

# Development with hot reload
python realtime_agent.py dev

# Production deployment
python realtime_agent.py start

# Test locally with terminal
python realtime_agent.py dev --terminal
```

## Key architectural decisions

Based on the research, here are the critical decisions for your implementation:

1. **Use API Gateway pattern**: Don't embed Amadeus SDK in the agent. The added network hop (200-400ms) is worth the benefits of centralized error handling and easier maintenance.

2. **Implement circuit breakers**: Protect against Amadeus API failures with retry logic and fallback responses.

3. **Optimize for latency**: Use connection pooling, implement caching for common routes, and deploy your API server in the same region as LiveKit Cloud.

4. **State management**: Use `context.userdata` for conversation state rather than external storage for simple booking flows.

5. **Security**: Store Amadeus credentials in AWS Secrets Manager or environment variables, never in code.

## Next steps

1. Fix your deployment error by verifying project configuration
2. Update your agent code to use the new `AgentSession` pattern
3. Deploy your API server to ECS with the provided Docker configuration
4. Test the complete flow with the terminal interface before production deployment
5. Monitor latency metrics to ensure sub-800ms response times

The architecture combining LiveKit Cloud for agents with containerized services on ECS provides the optimal balance of managed scalability and flexibility for your flight booking system.