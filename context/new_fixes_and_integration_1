# LiveKit Cloud Deployment Solutions and Architecture Validation for Polyglot Flight Search Assistant

## Key findings resolve your deployment error and validate your architecture

Based on comprehensive research of LiveKit's 2024/2025 documentation and deployment patterns, I've identified the root cause of your deployment error and validated your architectural approach. The "project does not match agent subdomain []" error stems from using deprecated CLI commands, and your proposed architecture follows recommended patterns with minor corrections needed.

## 1. Deployment error solution: Use template-based creation

The `lk agent create` command you're using is **deprecated** in LiveKit CLI v2.4.12. This explains the subdomain matching error you're encountering.

**Immediate Solution:**
```bash
# Instead of: lk agent create .
# Use the new template-based approach:
lk app create --template voice-pipeline-agent-python polyglot-rag-assistant

# Or update CLI and retry:
go install github.com/livekit/livekit-cli@latest
```

The modern deployment workflow uses templates that properly configure project structure and avoid subdomain conflicts. Available templates include `voice-pipeline-agent-python`, `multimodal-agent-python`, and `outbound-caller-python`.

## 2. Architecture validation confirms your approach is correct

Your proposed architecture `Browser → LiveKit Room SDK → LiveKit Cloud → Agent → FastAPI → Amadeus` follows **LiveKit's recommended patterns** for production systems. The indirect integration pattern (Agent → API Server → Amadeus) is actually preferred over embedding the Amadeus SDK directly in the agent.

**Benefits of your indirect architecture:**
- **Service separation** enables independent scaling and updates
- **API versioning** allows backend changes without agent modifications  
- **Team separation** lets different teams own agent vs. API logic
- **Easier testing** through mocked API responses

LiveKit documentation explicitly states: "LiveKit WebRTC is used between the frontend and the agent, while the agent communicates with your backend using HTTP and WebSockets."

## 3. OpenAI Realtime API integration requires syntax correction

Your implementation needs a minor but important correction. The syntax `openai.LLM.with_realtime(model='gpt-4o-realtime-preview-2024-12-17')` is incorrect.

**Correct implementation:**
```python
from livekit.plugins import openai

# Use RealtimeModel directly
llm = openai.realtime.RealtimeModel(
    model='gpt-4o-realtime-preview-2024-12-17',
    voice='alloy'  # or 'coral', 'sage', etc.
)

# Then use in AgentSession
session = AgentSession(
    vad=silero.VAD.load(),
    llm=llm,  # Your RealtimeModel instance
    # No separate STT/TTS needed with Realtime API
)
```

The Realtime API handles both speech-to-text and text-to-speech internally, eliminating the need for separate STT/TTS components.

## 4. Multiple deployment methods available beyond CLI

Research identified **five primary deployment methods** for LiveKit agents in 2024/2025:

**Template-based CLI (Recommended):**
```bash
lk app create --template voice-pipeline-agent-python my-agent
cd my-agent
python agent.py dev  # Development
python agent.py start  # Production
```

**Direct Python development:**
Create agent.py with proper structure and run directly.

**Docker deployment:**
```dockerfile
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["python", "agent.py", "start"]
```

**Kubernetes deployment:**
Use provided Helm charts or custom manifests with proper environment variables.

**Cloud platforms:**
Deploy to Render.com, AWS ECS, or LiveKit Cloud's managed service.

## 5. LiveKit agents have minimal file requirements

Your concern about required files is addressed - LiveKit agents **don't require** package.json, Procfile, or agent manifest files. The framework follows a "built in code, not configuration" philosophy.

**Required files:**
- `agent.py` - Main agent implementation
- `requirements.txt` - Python dependencies
- `.env` - Environment variables
- `Dockerfile` - For containerized deployment (optional but recommended)

**Not required:**
- ❌ package.json (Node.js specific)
- ❌ Procfile (Heroku specific)
- ❌ livekit.toml (not used for agents)
- ❌ Agent manifest files

## 6. Token generation implementation is correct with best practices

Your jwt.encode() approach is technically correct, but LiveKit provides a higher-level API that's preferred:

**Best practice implementation:**
```python
from livekit import api

token = api.AccessToken(
    api_key="your-api-key",
    api_secret="your-api-secret"
).with_identity("user-id") \
 .with_name("User Name") \
 .with_grants(api.VideoGrants(
     room_join=True,
     room="room-name",
     can_publish=True,
     can_subscribe=True
 )).to_jwt()
```

This handles all JWT claims structure and encoding automatically.

## 7. Agent entry point configuration confirmed correct

Your `cli.run_app(WorkerOptions(entrypoint_fnc=entrypoint))` is the **correct pattern** for LiveKit agents in 2024/2025. This is the standard entry point configuration.

**Complete working example:**
```python
from livekit.agents import cli, WorkerOptions

async def entrypoint(ctx: JobContext):
    await ctx.connect()
    # Agent implementation here

if __name__ == "__main__":
    cli.run_app(WorkerOptions(entrypoint_fnc=entrypoint))
```

## 8. LiveKit agents fully support external HTTP API calls

LiveKit agents can definitely call external APIs like your Amadeus API server. The recommended pattern uses **function tools**:

```python
from livekit.agents import function_tool
import httpx

@function_tool
async def search_flights(context, origin: str, destination: str):
    """Search for flights using external API"""
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "http://localhost:8000/api/flights/search",
            json={"origin": origin, "destination": destination}
        )
        return response.json()

# Add to agent
agent = Agent(
    instructions="You are a flight search assistant",
    tools=[search_flights]
)
```

## 9. CLI v2.4.12 has known issues with subdomain handling

The research confirms breaking changes in LiveKit CLI v2.4.12:
- The `lk agent create` command was deprecated
- Project naming conventions changed
- Subdomain handling was refactored

**Recommended actions:**
1. Update to the latest CLI version
2. Use `lk app create --template` instead
3. Re-authenticate with `lk cloud auth` if needed

## 10. Comprehensive documentation and examples available

LiveKit provides extensive documentation for 2024/2025 deployments:

**Key resources:**
- Official docs: https://docs.livekit.io/agents/
- GitHub examples: https://github.com/livekit-examples/
- Production deployment guide with Kubernetes manifests
- Working examples including realtime-playground and agent-deployment repos

**Current version:** LiveKit Agents 1.1.5 (June 2025) is production-ready with v1.0 being a major framework overhaul from late 2024.

## Recommended implementation approach

Based on the research, here's the optimal path forward:

1. **Fix the deployment issue** by switching to template-based creation:
   ```bash
   lk app create --template voice-pipeline-agent-python polyglot-rag-assistant
   ```

2. **Correct the OpenAI Realtime API syntax** in your agent code

3. **Keep your indirect architecture** - it's the recommended pattern for production

4. **Ensure minimal file structure** - remove any unnecessary configuration files

5. **Deploy using Docker** for production consistency

Your architecture and approach are fundamentally sound. The deployment error is simply due to CLI command deprecation, and with these corrections, your Polyglot Flight Search Assistant should deploy successfully to LiveKit Cloud.